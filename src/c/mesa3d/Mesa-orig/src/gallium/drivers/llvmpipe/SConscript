Import('*')

env = env.Clone()

env.Tool('llvm')
if not env.has_key('LLVM_VERSION'):
    print 'warning: LLVM not found: not building llvmpipe'
    Return()

env.Tool('udis86')

env.CodeGenerate(
	target = 'lp_tile_soa.c',
	script = 'lp_tile_soa.py',
	source = ['#src/gallium/auxiliary/util/u_format.csv'],
	command = 'python $SCRIPT $SOURCE > $TARGET'
)

llvmpipe = env.ConvenienceLibrary(
	target = 'llvmpipe',
	source = [
		'lp_bld_alpha.c',
		'lp_bld_arit.c',
		'lp_bld_blend_aos.c',
		'lp_bld_blend_logicop.c',
		'lp_bld_blend_soa.c',
		'lp_bld_const.c',
		'lp_bld_conv.c',
		'lp_bld_debug.c',
		'lp_bld_depth.c',
		'lp_bld_flow.c',
		'lp_bld_format_aos.c',
        'lp_bld_format_query.c',
		'lp_bld_format_soa.c',
		'lp_bld_interp.c',
		'lp_bld_intr.c',
		'lp_bld_misc.cpp',
        'lp_bld_pack.c',
        'lp_bld_sample.c',
		'lp_bld_sample_soa.c',
		'lp_bld_struct.c',
		'lp_bld_logic.c',
		'lp_bld_swizzle.c',
		'lp_bld_tgsi_soa.c',		
		'lp_bld_type.c',
		'lp_buffer.c',
		'lp_clear.c',
		'lp_context.c',
		'lp_draw_arrays.c',
		'lp_flush.c',
		'lp_jit.c',
		'lp_prim_vbuf.c',
		'lp_setup.c',
		'lp_query.c',
		'lp_screen.c',
		'lp_state_blend.c',
		'lp_state_clip.c',
		'lp_state_derived.c',
		'lp_state_fs.c',
		'lp_state_rasterizer.c',
		'lp_state_sampler.c',
		'lp_state_surface.c',
		'lp_state_vertex.c',
		'lp_state_vs.c',
		'lp_surface.c',
		'lp_tex_cache.c',
		'lp_tex_sample_c.c',
		'lp_tex_sample_llvm.c',
		'lp_texture.c',
		'lp_tile_cache.c',
		'lp_tile_soa.c',
	])


env = env.Clone()

env.Prepend(LIBS = [llvmpipe] + auxiliaries)

env.Program(
    target = 'lp_test_format',
    source = ['lp_test_format.c', 'lp_test_main.c'],
)

env.Program(
    target = 'lp_test_blend',
    source = ['lp_test_blend.c', 'lp_test_main.c'],
)

env.Program(
    target = 'lp_test_conv',
    source = ['lp_test_conv.c', 'lp_test_main.c'],
)

Export('llvmpipe')
